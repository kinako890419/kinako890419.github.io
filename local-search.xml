<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>測試用_Quick Sort 筆記</title>
    <link href="/2023/02/11/%E6%B8%AC%E8%A9%A6%E7%94%A8_Quick-Sort-%E7%AD%86%E8%A8%98/"/>
    <url>/2023/02/11/%E6%B8%AC%E8%A9%A6%E7%94%A8_Quick-Sort-%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>為”Divide and Conquer”之演算法</li><li>選擇數列中的一個值作為<strong>pivot</strong>(control key)<ul><li>一般的方法拿第一個值，演算法版拿最後一個值</li></ul></li></ul><h2 id="一般做法"><a href="#一般做法" class="headerlink" title="一般做法"></a>一般做法</h2><h3 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> partition(<span class="hljs-built_in">int</span> arr<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> low, <span class="hljs-built_in">int</span> high)<br>&#123;<br>    <span class="hljs-built_in">int</span> i = low;<br>    <span class="hljs-built_in">int</span> j = high;<br>    <span class="hljs-built_in">int</span> pivot = arr<span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span>;<br><br>    <span class="hljs-keyword">while</span> (i &lt; j) <span class="hljs-comment">// 若i與j之位置無相交</span><br>    &#123;<br>        <span class="hljs-keyword">while</span> (pivot &gt;= arr<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>)<br>            i++;<br>        <span class="hljs-keyword">while</span> (pivot &lt; arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>)<br>            j--;<br>        <span class="hljs-keyword">if</span> (i &lt; j)<br>            swap(arr<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>);<br>    &#125;<br>    swap(arr<span class="hljs-literal">[<span class="hljs-identifier">low</span>]</span>, arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>);<br>    return j;<br>&#125;<br><br>void quick<span class="hljs-constructor">Sort(<span class="hljs-params">int</span> <span class="hljs-params">arr</span>[], <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (low &lt; high)<br>    &#123;<br>        <span class="hljs-built_in">int</span> pivot = partition(arr, low, high);<br>        <span class="hljs-comment">// divide and conquer</span><br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">arr</span>, <span class="hljs-params">low</span>, <span class="hljs-params">pivot</span> - 1)</span>; <span class="hljs-comment">// pivot左側做quick sort</span><br>        quick<span class="hljs-constructor">Sort(<span class="hljs-params">arr</span>, <span class="hljs-params">pivot</span> + 1, <span class="hljs-params">high</span>)</span>; <span class="hljs-comment">// pivotu右側做quick sort</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>i 由左往右找比 pivot 大之值</li><li>j 由右往左找比 pivot 小之值</li><li>若 i 與 j 無相交，將位置 i 與位置 j 之值互換</li><li>若 i 與 j 相交，即 i&gt;j，跳出迴圈，將 pivot 與 j 互換</li></ul><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><blockquote><p>26,5,31,1,61,11,59,15,48,19 做 Quick Sort 過程為何?</p></blockquote><table><thead><tr><th>pass</th><th>Data</th></tr></thead><tbody><tr><td>initial</td><td><strong>26</strong>,5,37,1,61,11,59,15,48,19</td></tr><tr><td>1</td><td>[11,5,19,1,15],<strong>26</strong>,[59,61,48,31]</td></tr><tr><td>2</td><td>[1,5],<strong>11</strong>,[19,15],<strong>26</strong>,[59,61,48,31]</td></tr><tr><td>3</td><td><strong>1</strong>,<strong>5</strong>,<strong>11</strong>,[19,15],<strong>26</strong>,[59,61,48,31]</td></tr><tr><td>4</td><td><strong>1</strong>,<strong>5</strong>,<strong>11</strong>,<strong>15</strong>,<strong>19</strong>,<strong>26</strong>,[59,61,48,31]</td></tr><tr><td>5</td><td><strong>1</strong>,<strong>5</strong>,<strong>11</strong>,<strong>15</strong>,<strong>19</strong>,<strong>26</strong>,[48,31],<strong>59</strong>,[61]</td></tr><tr><td>6</td><td><strong>1</strong>,<strong>5</strong>,<strong>11</strong>,<strong>15</strong>,<strong>19</strong>,<strong>26</strong>,[48,31],<strong>59</strong>,<strong>61</strong></td></tr><tr><td>7</td><td><strong>1</strong>,<strong>5</strong>,<strong>11</strong>,<strong>15</strong>,<strong>19</strong>,<strong>26</strong>,<strong>48</strong>,<strong>31</strong>,<strong>59</strong>,<strong>61</strong></td></tr></tbody></table><p>註: 粗體 &#x3D; sorted, [] &#x3D; unsorted</p><h3 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><ul><li><strong>Best Case</strong>: pass 1 後 pivot 插在數列的正中間 &#x3D;&gt; <span style= "background-color:yellow" > O(log n) </span><ul><li>T(n) &#x3D; T(n&#x2F;2) + T(n&#x2F;2)</li></ul></li><li><strong>Worst Case</strong>: 欲進行 Quick Sort 之 data 已經 sorted，不論由大到小或由小到大排序&#x3D;&gt; <span style= "background-color:yellow" > O($n^2$) </span></li></ul><h3 id="Worst-Case-的改善方法-—-Middle-of-Three"><a href="#Worst-Case-的改善方法-—-Middle-of-Three" class="headerlink" title="Worst Case 的改善方法 — Middle of Three"></a>Worst Case 的改善方法 — <span style= "background-color:aqua" >Middle of Three</span></h3><ul><li>使 pivot 不為數列中的最大或最小值</li><li>方法<ul><li>比較 A[low]、A[(low+high)&#x2F;2] (數列的中央)、A[high]大小，找出中間值與 A[low]互換，將新的 A[low]作為 pivot</li></ul></li></ul><h2 id="演算法版"><a href="#演算法版" class="headerlink" title="演算法版"></a>演算法版</h2><ul><li>將數列的<strong>最後一個值</strong>作為 pivot</li></ul><h3 id="partition-程式"><a href="#partition-程式" class="headerlink" title="partition 程式"></a><span style= "background-color:yellow" >partition 程式</span></h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs inform7">partition (arr<span class="hljs-comment">[]</span>, low, high)<br>&#123;<br>    pivot = arr<span class="hljs-comment">[high]</span>;<br>    i = (low – 1);<br>    for (j = low; j &lt;= high- 1; j++)&#123;<br>        if (arr<span class="hljs-comment">[j]</span> &lt; pivot)&#123;<br>            i++;<br>            swap(arr<span class="hljs-comment">[i]</span>,arr<span class="hljs-comment">[j]</span>)<br>        &#125;<br>    &#125;<br><br>    swap(arr<span class="hljs-comment">[i + 1]</span>,arr<span class="hljs-comment">[high]</span>) // i的下一個值和pivot互換<br>    return (i + 1) // return pivot<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="時間複雜度-1"><a href="#時間複雜度-1" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><ul><li><strong>Best Case</strong>: <span style= "background-color:yellow" > O(n log n) </span><ul><li>T(n) &#x3D; 2T(n) + c$*$n</li></ul></li><li><strong>Average Case</strong>: <span style= "background-color:yellow" > O(n log n) </span></li><li><strong>Worst Case</strong>: 欲進行 Quick Sort 之 data 已經 sorted，不論由大到小或由小到大排序，或<strong>資料全部相同</strong>&#x3D;&gt; <span style= "background-color:yellow" > O($n^2$) </span></li></ul><h2 id="使用-partition-概念找出未排序陣列中第-k-小之值"><a href="#使用-partition-概念找出未排序陣列中第-k-小之值" class="headerlink" title="使用 partition 概念找出未排序陣列中第 k 小之值"></a>使用 partition 概念找出未排序陣列中第 k 小之值</h2><h3 id="程式-1"><a href="#程式-1" class="headerlink" title="程式"></a>程式</h3><ul><li>直覺法為先做排序後尋找，極限為 O(n logn)</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> partition(<span class="hljs-built_in">int</span> arr<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> l, <span class="hljs-built_in">int</span> r);<br><br><span class="hljs-built_in">int</span> kth<span class="hljs-constructor">Smallest(<span class="hljs-params">int</span> <span class="hljs-params">arr</span>[], <span class="hljs-params">int</span> <span class="hljs-params">l</span>, <span class="hljs-params">int</span> <span class="hljs-params">r</span>, <span class="hljs-params">int</span> K)</span> <span class="hljs-comment">// 找陣列中大小第Kth之值</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (K &gt; <span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>K &lt;= r - l + <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// K在陣列範圍之內</span><br>        <span class="hljs-built_in">int</span> pos = partition(arr, l, r); <span class="hljs-comment">// pos = pivot的位置</span><br><br>        <span class="hljs-keyword">if</span> (pos - l<span class="hljs-operator"> == </span>K - <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 若pivot的位置等於K，pivot即陣列中大小第Kth之值</span><br>            return arr<span class="hljs-literal">[<span class="hljs-identifier">pos</span>]</span>;<br>        &#125;<br>        <span class="hljs-comment">// 若pivot位置大於或小於K，則往左半或右半邊做partition (遞迴)</span><br>        <span class="hljs-keyword">if</span> (pos - l &gt; K - <span class="hljs-number">1</span>) &#123;<br>            return kth<span class="hljs-constructor">Smallest(<span class="hljs-params">arr</span>, <span class="hljs-params">l</span>, <span class="hljs-params">pos</span> - 1, K)</span>;<br>        &#125;<br>        return kth<span class="hljs-constructor">Smallest(<span class="hljs-params">arr</span>, <span class="hljs-params">pos</span> + 1, <span class="hljs-params">r</span>, K - <span class="hljs-params">pos</span> + <span class="hljs-params">l</span> - 1)</span>;<br>    &#125;<br>    return INT_MAX;<br>&#125;<br><br><span class="hljs-built_in">int</span> partition(<span class="hljs-built_in">int</span> arr<span class="hljs-literal">[]</span>, <span class="hljs-built_in">int</span> l, <span class="hljs-built_in">int</span> r)<br>&#123;<br>    <span class="hljs-built_in">int</span> x = arr<span class="hljs-literal">[<span class="hljs-identifier">r</span>]</span>, i = l;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = l; j &lt;= r - <span class="hljs-number">1</span>; j++) &#123;<br>        <span class="hljs-keyword">if</span> (arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span> &lt;= x) &#123;<br>            swap(&amp;arr<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, &amp;arr<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>);<br>            i++;<br>        &#125;<br>    &#125;<br><br>    swap(&amp;arr<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, &amp;arr<span class="hljs-literal">[<span class="hljs-identifier">r</span>]</span>);<br>    return i;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="時間複雜度-2"><a href="#時間複雜度-2" class="headerlink" title="時間複雜度"></a>時間複雜度</h3><ul><li><strong>Best Case</strong>: <span style= "background-color:yellow" > O(n) </span><ul><li>T(n) &#x3D; T(n&#x2F;2) + c$*$n</li></ul></li><li><strong>Average Case</strong>: 在不失一般性的情況下<span style= "background-color:yellow" > O(n) </span></li><li><strong>Worst Case</strong>: <span style= "background-color:yellow" > O($n^2$) </span></li></ul><hr><p><a href="https://www.geeksforgeeks.org/quick-sort/">source1</a><br><a href="https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/">source2</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/11/hello-world/"/>
    <url>/2023/02/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
